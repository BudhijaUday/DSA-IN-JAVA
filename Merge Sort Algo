## Merge Sort

##Steps involved:

1. Divide array into two parts 
2. Get both parts sorted via reccursion.
3. Merge both parts.

## Code for Same

import java.util.Arrays;

public class MergeSort {
    public static void main(String[] args) {
        int[] arr = {5,4,3,2,1};
        arr = main(arr);
        System.out.println(Arrays.toString(arr));
    }

    static int[] main(int[] arr) {
        if (arr.length == 1) {
            return arr;
        }
        int mid = arr.length / 2;
        int[] left = main(Arrays.copyOfRange(arr , 0 , mid));
        int[] right = main(Arrays.copyOfRange(arr , mid , arr.length));

        return merge(left , right);
    }

    private static int[] merge(int[] left , int[] right) {
        int[] mix = new int[left.length + right.length];

        int i = 0;
        int j = 0;
        int k = 0;

        while(i < left.length && j < right.length) {
            if (left[i] < right[j]) {
                mix[k] = left[i];
                i++;
            } else {
                mix[k] = right[j];
                j++;
            }
            k++;
        }
//        it may be possible that one of the arrays is not complete
//        copy the remaining array
        while(i < left.length) {
            mix[k] = left[i];
            i++;
            k++;
        }
        while(j < right.length) {
            mix[k] = right[j];
            j++;
            k++;
        }
        return mix;
    }
}


## Auxiliary Space: O(N), In merge sort all elements are copied into an auxiliary array. So N auxiliary space is required for merge sort.

## Applications of Merge Sort:

1. Sorting large datasets: Merge sort is particularly well-suited for sorting large datasets due to its guaranteed worst-case time complexity of O(n log n).
2. External sorting: Merge sort is commonly used in external sorting, where the data to be sorted is too large to fit into memory.
3. Custom sorting: Merge sort can be adapted to handle different input distributions, such as partially sorted, nearly sorted, or completely unsorted data.


##Advantages of Merge Sort:

1. Stability: Merge sort is a stable sorting algorithm, which means it maintains the relative order of equal elements in the input array.
2. Guaranteed worst-case performance: Merge sort has a worst-case time complexity of O(N logN), which means it performs well even on large datasets.
3. Parallelizable: Merge sort is a naturally parallelizable algorithm, which means it can be easily parallelized to take advantage of multiple processors or threads.

##Drawbacks of Merge Sort:

1. Space complexity: Merge sort requires additional memory to store the merged sub-arrays during the sorting process. 
2. Not in-place: Merge sort is not an in-place sorting algorithm, which means it requires additional memory to store the sorted data. This can be a disadvantage in applications where memory usage is a concern.
3. Not always optimal for small datasets: For small datasets, Merge sort has a higher time complexity than some other sorting algorithms, such as insertion sort. This can result in slower performance for very small datasets.
